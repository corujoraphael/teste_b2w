{"version":3,"sources":["Jogo/Jogo.js","App.js","serviceWorker.js","index.js"],"names":["Jogo","props","state","planet","qtdPlanets","loading","this","setState","rand","Math","ceil","random","fetch","then","res","json","data","films","length","catch","console","log","count","getPlanet","className","id","name","parseInt","population","toLocaleString","climate","terrain","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAsDeA,G,mBAjDd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACZC,OAAQ,GACRC,WAAY,EACZC,SAAS,GALO,E,yEASN,IAAD,OACVC,KAAKC,SAAS,CAACF,SAAQ,IACvB,IAAIG,EAAOC,KAAKC,KAAKD,KAAKE,UAAYL,KAAKJ,MAAME,WAAa,GAAM,GACpEQ,MAAM,gCAAgCJ,GACrCK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACNA,EAAKC,MAAQD,EAAKC,MAAMC,OACxB,EAAKX,SAAS,CAACJ,OAAOa,EAAKX,SAAQ,OAEnCc,MAAMC,QAAQC,O,0CAII,IAAD,OAClBf,KAAKC,SAAS,CAACF,SAAQ,IACvBO,MAAM,iCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACN,EAAKT,SAAS,CAACH,WAAWY,EAAKM,QAC/B,EAAKC,eAELJ,MAAMC,QAAQC,O,+BAGP,IAAD,OACP,OAAIf,KAAKJ,MAAMG,QACN,yBAAKmB,UAAU,WAChB,6BACP,yBAAKC,GAAG,aAEP,4BAAKnB,KAAKJ,MAAMC,OAAOuB,MACvB,2BAAG,0BAAMF,UAAU,QAAhB,eAAH,IAA+CG,SAASrB,KAAKJ,MAAMC,OAAOyB,YAA6CD,SAASrB,KAAKJ,MAAMC,OAAOyB,YAAYC,eAAe,SAArFvB,KAAKJ,MAAMC,OAAOyB,YAC1G,2BAAG,0BAAMJ,UAAU,QAAhB,aAAwClB,KAAKJ,MAAMC,OAAO2B,SAC7D,2BAAG,0BAAMN,UAAU,QAAhB,aAAwClB,KAAKJ,MAAMC,OAAO4B,SAC7D,uBAAGP,UAAU,UAAb,eAAkC,0BAAMA,UAAU,QAAQlB,KAAKJ,MAAMC,OAAOc,OAA5E,YAEK,4BAAQe,QAAS,kBAAI,EAAKT,cAA1B,a,GA/CUU,IAAMC,YCSVC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCKcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.8b68402a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Jogo.css';\r\n\r\nclass Jogo extends React.Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tplanet: {},\r\n\t\t\tqtdPlanets: 0,\r\n\t\t\tloading: false\r\n\t\t};\r\n\t}\r\n\r\n\tgetPlanet(){\r\n\t\tthis.setState({loading:true});\r\n\t\tlet rand = Math.ceil(Math.random() * (this.state.qtdPlanets - 1 ) + 1);\r\n\t\tfetch('https://swapi.co/api/planets/'+rand)\r\n\t\t.then(res => res.json())\r\n\t\t.then((data)=>{\r\n\t\t\tdata.films = data.films.length;\r\n\t\t\tthis.setState({planet:data,loading:false});\r\n\t\t})\r\n\t\t.catch(console.log)\r\n\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.setState({loading:true});\r\n\t\tfetch('https://swapi.co/api/planets/')\r\n\t\t.then(res => res.json())\r\n\t\t.then((data)=>{\r\n\t\t\tthis.setState({qtdPlanets:data.count});\r\n\t\t\tthis.getPlanet();\r\n\t\t})\r\n\t\t.catch(console.log)\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.loading)\r\n\t\t\treturn (<div className=\"loader\"></div>)\r\n\t\treturn (<div>\r\n\t\t\t<div id=\"container\">\r\n\r\n\t\t\t\t<h1>{this.state.planet.name}</h1>\r\n\t\t\t\t<p><span className=\"bold\">Population:</span> {!parseInt(this.state.planet.population) ? this.state.planet.population : parseInt(this.state.planet.population).toLocaleString('pt-BR') }</p>\r\n\t\t\t\t<p><span className=\"bold\">Climate: </span>{this.state.planet.climate}</p>\r\n\t\t\t\t<p><span className=\"bold\">Terrain: </span>{this.state.planet.terrain}</p>\r\n\t\t\t\t<p className=\"center\">Featured in <span className=\"bold\">{this.state.planet.films}</span> films </p>\r\n\t\t\t\t\r\n\t\t\t</div><button onClick={()=>this.getPlanet()}>Next</button></div>);\r\n\t}\r\n}\r\n\r\nexport default Jogo;","import React from 'react';\nimport './App.css';\nimport Jogo from './Jogo/Jogo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jogo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}